import { BREAK, visit } from 'graphql';
import { isPromise, memoize1 } from '@graphql-tools/utils';
export function iterateAsync(iterable, callback, results) {
    const iterator = iterable[Symbol.iterator]();
    function iterate() {
        const { done: endOfIterator, value } = iterator.next();
        if (endOfIterator) {
            return;
        }
        const result$ = callback(value);
        if (isPromise(result$)) {
            return result$.then(result => {
                if (result) {
                    results?.push(result);
                }
                return iterate();
            });
        }
        if (result$) {
            results?.push(result$);
        }
        return iterate();
    }
    return iterate();
}
export const isStreamOperation = memoize1(function isStreamOperation(astNode) {
    let isStream = false;
    visit(astNode, {
        Field: {
            enter(node) {
                if (node.directives?.some(d => d.name.value === 'stream')) {
                    isStream = true;
                    return BREAK;
                }
                return undefined;
            },
        },
    });
    return isStream;
});
