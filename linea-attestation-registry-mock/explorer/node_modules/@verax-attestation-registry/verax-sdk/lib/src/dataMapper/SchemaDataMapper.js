"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseDataMapper_1 = __importDefault(require("./BaseDataMapper"));
const SchemaRegistry_1 = require("../abi/SchemaRegistry");
const transactionSender_1 = require("../utils/transactionSender");
const simulationErrorHandler_1 = require("../utils/simulationErrorHandler");
class SchemaDataMapper extends BaseDataMapper_1.default {
    constructor() {
        super(...arguments);
        this.typeName = "schema";
        this.gqlInterface = `{
        id
        name
        description
        context
        schema
  }`;
    }
    async simulateUpdateRouter(routerAddress) {
        return this.simulateContract("updateRouter", [routerAddress]);
    }
    async updateRouter(routerAddress, waitForConfirmation = false) {
        const request = await this.simulateUpdateRouter(routerAddress);
        return (0, transactionSender_1.executeTransaction)(request, this.web3Client, this.walletClient, waitForConfirmation);
    }
    async simulateCreate(name, description, context, schemaString) {
        return this.simulateContract("createSchema", [name, description, context, schemaString]);
    }
    async create(name, description, context, schemaString, waitForConfirmation = false) {
        const request = await this.simulateCreate(name, description, context, schemaString);
        return (0, transactionSender_1.executeTransaction)(request, this.web3Client, this.walletClient, waitForConfirmation);
    }
    async simulateUpdateContext(schemaId, context) {
        return this.simulateContract("updateContext", [schemaId, context]);
    }
    async updateContext(schemaId, context, waitForConfirmation = false) {
        const request = await this.simulateUpdateContext(schemaId, context);
        return (0, transactionSender_1.executeTransaction)(request, this.web3Client, this.walletClient, waitForConfirmation);
    }
    async getIdFromSchemaString(schema) {
        return this.executeReadMethod("getIdFromSchemaString", [schema]);
    }
    async getSchema(schemaId) {
        return this.executeReadMethod("getSchema", [schemaId]);
    }
    async getSchemasNumber() {
        return this.executeReadMethod("getSchemasNumber", []);
    }
    async isRegistered(schemaId) {
        return this.executeReadMethod("isRegistered", [schemaId]);
    }
    async getSchemaIds(index) {
        return this.executeReadMethod("schemaIds", [index]);
    }
    async executeReadMethod(functionName, args) {
        return this.web3Client.readContract({
            abi: SchemaRegistry_1.abiSchemaRegistry,
            address: this.conf.schemaRegistryAddress,
            functionName,
            args,
        });
    }
    async simulateContract(functionName, args) {
        if (!this.walletClient)
            throw new Error("VeraxSDK - Wallet not available");
        try {
            const { request } = await this.web3Client.simulateContract({
                address: this.conf.schemaRegistryAddress,
                abi: SchemaRegistry_1.abiSchemaRegistry,
                functionName,
                account: this.walletClient.account,
                args,
            });
            return request;
        }
        catch (err) {
            (0, simulationErrorHandler_1.handleSimulationError)(err);
        }
    }
}
exports.default = SchemaDataMapper;
//# sourceMappingURL=SchemaDataMapper.js.map