"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const VeraxSdk_1 = require("../../src/VeraxSdk");
const schemaExamples_1 = __importDefault(require("./schemaExamples"));
const dotenv_1 = require("dotenv");
const path = __importStar(require("path"));
const envPath = path.resolve(__dirname, "../../.env");
(0, dotenv_1.config)({ path: envPath });
const privateKey = process.env.PRIVATE_KEY;
let argv = process.argv[3];
argv !== null && argv !== undefined && argv !== "wait" ? (argv = argv.replaceAll("\\", "")) : (argv = "");
const waitForConfirmationArgv = process.argv[4];
let waitForConfirmation = false;
if ((argv === "" && process.argv[3] === "wait") || waitForConfirmationArgv === "wait")
    waitForConfirmation = true;
const veraxSdk = new VeraxSdk_1.VeraxSdk(VeraxSdk_1.VeraxSdk.DEFAULT_LINEA_TESTNET, undefined, privateKey);
new schemaExamples_1.default(veraxSdk).run(argv, process.argv[2], waitForConfirmation);
//# sourceMappingURL=index.js.map