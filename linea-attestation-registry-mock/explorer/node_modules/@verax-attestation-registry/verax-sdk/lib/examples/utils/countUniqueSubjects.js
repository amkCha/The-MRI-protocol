"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const VeraxSdk_1 = require("../../src/VeraxSdk");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const BATCH_SIZE = 100000;
const fetchSubjectsFromFile = async (fileSuffix) => {
    console.log(`Reading file #${fileSuffix}...`);
    return JSON.parse(fs_1.default.readFileSync(path_1.default.resolve(__dirname, `../../allSubjects-${fileSuffix}.txt`), "utf8"));
};
async function main() {
    const veraxSdk = new VeraxSdk_1.VeraxSdk(VeraxSdk_1.VeraxSdk.DEFAULT_LINEA_MAINNET);
    const attestationNumber = await veraxSdk.utils.getAttestationIdCounter();
    const filesNumber = Math.ceil(Number(attestationNumber) / BATCH_SIZE);
    const allSubjects = [];
    const uniqueSubjects = new Set();
    for (let i = 0; i < filesNumber; i++) {
        allSubjects.push(await fetchSubjectsFromFile(i));
    }
    console.log(`Total subjects = ${allSubjects.reduce((total, subjects) => total + subjects.length, 0)}`);
    for (const array of allSubjects) {
        for (const subject of array) {
            uniqueSubjects.add(subject);
        }
    }
    console.log(`Unique subjects = ${uniqueSubjects.size}`);
    const uniqueSubjectsArray = Array.from(uniqueSubjects);
    const chunks = Math.ceil(uniqueSubjectsArray.length / BATCH_SIZE);
    for (let i = 0; i < chunks; i++) {
        const start = i * BATCH_SIZE;
        const end = start + BATCH_SIZE;
        const chunk = uniqueSubjectsArray.slice(start, end);
        fs_1.default.writeFile(path_1.default.resolve(__dirname, `../../uniqueSubjects-${i}.txt`), JSON.stringify(chunk), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log(`File uniqueSubjects-${i}.txt was saved!`);
        });
    }
}
// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
//# sourceMappingURL=countUniqueSubjects.js.map