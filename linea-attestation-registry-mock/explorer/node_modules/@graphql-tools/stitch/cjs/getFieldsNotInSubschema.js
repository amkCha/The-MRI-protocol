"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFieldsNotInSubschema = void 0;
const graphql_1 = require("graphql");
const delegate_1 = require("@graphql-tools/delegate");
const utils_1 = require("@graphql-tools/utils");
function getFieldsNotInSubschema(schema, stitchingInfo, gatewayType, subschemaType, fieldNodes, fragments, variableValues) {
    const { fields: subFieldNodesByResponseKey } = (0, utils_1.collectSubFields)(schema, fragments, variableValues, gatewayType, fieldNodes);
    // TODO: Verify whether it is safe that extensions always exists.
    const fieldNodesByField = stitchingInfo?.fieldNodesByField;
    const shouldAdd = (fieldType, selection) => !fieldNodesByField?.[fieldType.name]?.[selection.name.value];
    const fields = subschemaType.getFields();
    const fieldsNotInSchema = new Set();
    for (const [, subFieldNodes] of subFieldNodesByResponseKey) {
        const fieldName = subFieldNodes[0].name.value;
        if (!fields[fieldName]) {
            for (const subFieldNode of subFieldNodes) {
                fieldsNotInSchema.add(subFieldNode);
            }
        }
        else {
            const field = fields[fieldName];
            for (const subFieldNode of subFieldNodes) {
                const unavailableFields = (0, delegate_1.extractUnavailableFields)(schema, field, subFieldNode, shouldAdd);
                if (unavailableFields.length) {
                    fieldsNotInSchema.add({
                        ...subFieldNode,
                        selectionSet: {
                            kind: graphql_1.Kind.SELECTION_SET,
                            selections: unavailableFields,
                        },
                    });
                }
            }
        }
        const fieldNodesForField = fieldNodesByField?.[gatewayType.name]?.[fieldName];
        if (fieldNodesForField) {
            for (const fieldNode of fieldNodesForField) {
                if (fieldNode.name.value !== '__typename' && !fields[fieldNode.name.value]) {
                    // consider node that depends on something not in the schema as not in the schema
                    for (const subFieldNode of subFieldNodes) {
                        fieldsNotInSchema.add(subFieldNode);
                    }
                    fieldsNotInSchema.add(fieldNode);
                }
            }
        }
    }
    return Array.from(fieldsNotInSchema);
}
exports.getFieldsNotInSubschema = getFieldsNotInSubschema;
