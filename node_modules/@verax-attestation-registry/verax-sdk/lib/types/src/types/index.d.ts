import { Address, Chain, EIP1193Provider } from "viem";
import { SDKMode } from "../utils/constants";
export interface Conf {
    chain: Chain;
    mode: SDKMode;
    subgraphUrl: string;
    portalRegistryAddress: Address;
    moduleRegistryAddress: Address;
    schemaRegistryAddress: Address;
    attestationRegistryAddress: Address;
}
export type AttestationPayload = {
    schemaId: string;
    expirationDate: number;
    subject: string;
    attestationData: object[];
};
export type AttestationWithDecodeObject = Attestation & {
    decodeObject: {
        [propName: string]: unknown;
    };
};
export type Attestation = OnChainAttestation & {
    id: string;
    schemaString: string;
    decodedData: string[];
    decodedPayload: object;
    offchainData?: OffchainData;
};
export type OffchainData = {
    schemaId: string;
    uri: string;
    error?: string;
};
export type OnChainAttestation = {
    attestationId: string;
    schemaId: string;
    replacedBy: string | null;
    attester: Address;
    portal: Address;
    attestedDate: number;
    expirationDate: number;
    revocationDate: number | null;
    version: number;
    revoked: boolean;
    subject: string;
    attestationData: string;
};
export type Schema = {
    id: string;
    name: string;
    description: string;
    context: string;
    schema: string;
};
export type Portal = {
    id: Address;
    ownerAddress: Address;
    modules: Address[];
    isRevocable: boolean;
    name: string;
    description: string;
    ownerName: string;
};
export type Module = OnChainModule & {
    id: string;
};
export type OnChainModule = {
    moduleAddress: Address;
    name: string;
    description: string;
};
declare global {
    interface Window {
        ethereum: EIP1193Provider;
    }
}
//# sourceMappingURL=index.d.ts.map