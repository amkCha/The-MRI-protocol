"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphClientHelper_1 = require("../utils/graphClientHelper");
const axios_1 = __importDefault(require("axios"));
class BaseDataMapper {
    constructor(_conf, _web3Client, _veraxSdk, _walletClient) {
        this.conf = _conf;
        this.web3Client = _web3Client;
        this.veraxSdk = _veraxSdk;
        this.walletClient = _walletClient;
    }
    async findOneById(id) {
        const query = `query get_${this.typeName} { ${this.typeName}(id: "${id}") ${this.gqlInterface} }`;
        const { data, status } = await this.subgraphCall(query);
        if (status != 200) {
            throw new Error(`Error(s) while fetching ${this.typeName}`);
        }
        return data?.data ? data.data[`${this.typeName}`] : undefined;
    }
    async findBy(first, skip, where, orderBy, orderDirection) {
        const query = `
        query get_${this.typeName}s{
          ${this.typeName}s(
            first: ${first || 100}
            skip: ${skip || 0}
            where: ${where ? (0, graphClientHelper_1.stringifyWhereClause)(where) : null}
            orderBy: ${orderBy || null}
            orderDirection: ${orderDirection || null}
          )
          ${this.gqlInterface}
        }
    `;
        const { data, status } = await this.subgraphCall(query);
        if (status != 200) {
            throw new Error(`Error(s) while fetching ${this.typeName}s`);
        }
        return data?.data ? data.data[`${this.typeName}s`] : [];
    }
    async subgraphCall(query) {
        return axios_1.default.post(this.conf.subgraphUrl, { query }, {
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
        });
    }
}
exports.default = BaseDataMapper;
//# sourceMappingURL=BaseDataMapper.js.map