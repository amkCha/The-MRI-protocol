'use client';
import {} from '@wagmi/core';
import {} from '@wagmi/core/internal';
import { readContractsQueryOptions, } from '@wagmi/core/query';
import { useMemo } from 'react';
import {} from 'viem';
import {} from '../types/properties.js';
import { structuralSharing, useQuery, } from '../utils/query.js';
import { useChainId } from './useChainId.js';
import { useConfig } from './useConfig.js';
/** https://wagmi.sh/react/api/hooks/useReadContracts */
export function useReadContracts(parameters = {}) {
    const { contracts = [], query = {} } = parameters;
    const config = useConfig(parameters);
    const chainId = useChainId({ config });
    const options = readContractsQueryOptions(config, { ...parameters, chainId });
    const enabled = useMemo(() => {
        let isContractsValid = false;
        for (const contract of contracts) {
            const { abi, address, functionName } = contract;
            if (!abi || !address || !functionName) {
                isContractsValid = false;
                break;
            }
            isContractsValid = true;
        }
        return Boolean(isContractsValid && (query.enabled ?? true));
    }, [contracts, query.enabled]);
    return useQuery({
        ...options,
        ...query,
        enabled,
        structuralSharing: query.structuralSharing ?? structuralSharing,
    });
}
//# sourceMappingURL=useReadContracts.js.map