import { type Config, type GetProofErrorType, type ResolvedRegister } from '@wagmi/core';
import type { Evaluate } from '@wagmi/core/internal';
import { type GetProofData, type GetProofOptions, type GetProofQueryKey } from '@wagmi/core/query';
import { type GetProofQueryFnData } from '@wagmi/core/query';
import { type ConfigParameter, type QueryParameter } from '../types/properties.js';
import { type UseQueryReturnType } from '../utils/query.js';
export type UseProofParameters<config extends Config = Config, selectData = GetProofData> = Evaluate<GetProofOptions<config> & ConfigParameter<config> & QueryParameter<GetProofQueryFnData, GetProofErrorType, selectData, GetProofQueryKey<config>>>;
export type UseProofReturnType<selectData = GetProofData> = UseQueryReturnType<selectData, GetProofErrorType>;
/** https://wagmi.sh/react/api/hooks/useProof */
export declare function useProof<config extends Config = ResolvedRegister['config'], selectData = GetProofData>(parameters?: UseProofParameters<config, selectData>): UseProofReturnType<selectData>;
//# sourceMappingURL=useProof.d.ts.map