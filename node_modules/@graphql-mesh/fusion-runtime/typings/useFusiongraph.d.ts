import { DocumentNode, GraphQLSchema } from 'graphql';
import { Plugin } from 'graphql-yoga';
import { TransportBaseContext } from '@graphql-mesh/transport-common';
import { IResolvers } from '@graphql-tools/utils';
import { TransportsOption } from './utils.js';
export interface FusiongraphPluginOptions<TContext> {
    getFusiongraph(baseCtx: TransportBaseContext): GraphQLSchema | DocumentNode | string | Promise<GraphQLSchema | string | DocumentNode>;
    transports?: TransportsOption;
    polling?: number;
    additionalTypedefs?: DocumentNode | string | DocumentNode[] | string[];
    additionalResolvers?: IResolvers<unknown, TContext> | IResolvers<unknown, TContext>[];
    transportBaseContext?: TransportBaseContext;
    readinessCheckEndpoint?: string;
}
export declare function useFusiongraph<TContext extends Record<string, any> = Record<string, any>>(opts: FusiongraphPluginOptions<TContext>): Plugin<TContext> & {
    invalidateUnifiedGraph(): void;
};
