import { type Config } from '../../createConfig.js';
import type { ScopeKeyParameter } from '../../types/properties.js';
import type { Evaluate, ExactPartial } from '../../types/utils.js';
import { type GetCapabilitiesParameters, type GetCapabilitiesReturnType } from '../actions/getCapabilities.js';
export type GetCapabilitiesOptions = Evaluate<ExactPartial<GetCapabilitiesParameters> & ScopeKeyParameter>;
export declare function getCapabilitiesQueryOptions<config extends Config>(config: config, options?: GetCapabilitiesOptions): {
    readonly queryFn: ({ queryKey }: {
        queryKey: readonly ["capabilities", {
            account?: `0x${string}` | import("viem").Account | undefined;
            connector?: import("../../createConfig.js").Connector | undefined;
            scopeKey?: string | undefined;
        }];
        signal: AbortSignal;
        meta: Record<string, unknown> | undefined;
    }) => Promise<{
        [x: number]: import("viem").WalletCapabilities;
    }>;
    readonly queryKey: readonly ["capabilities", {
        account?: `0x${string}` | import("viem").Account | undefined;
        connector?: import("../../createConfig.js").Connector | undefined;
        scopeKey?: string | undefined;
    }];
    readonly retry: (failureCount: number, error: import("../actions/getCapabilities.js").GetCapabilitiesErrorType) => boolean;
};
export type GetCapabilitiesQueryFnData = GetCapabilitiesReturnType;
export type GetCapabilitiesData = GetCapabilitiesQueryFnData;
export declare function getCapabilitiesQueryKey(options?: GetCapabilitiesOptions): readonly ["capabilities", {
    account?: `0x${string}` | import("viem").Account | undefined;
    connector?: import("../../createConfig.js").Connector | undefined;
    scopeKey?: string | undefined;
}];
export type GetCapabilitiesQueryKey = ReturnType<typeof getCapabilitiesQueryKey>;
//# sourceMappingURL=getCapabilities.d.ts.map