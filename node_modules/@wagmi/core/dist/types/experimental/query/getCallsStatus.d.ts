import { type Config } from '../../createConfig.js';
import type { ScopeKeyParameter } from '../../types/properties.js';
import type { Evaluate } from '../../types/utils.js';
import { type GetCallsStatusParameters, type GetCallsStatusReturnType } from '../actions/getCallsStatus.js';
export type GetCallsStatusOptions = Evaluate<GetCallsStatusParameters & ScopeKeyParameter>;
export declare function getCallsStatusQueryOptions<config extends Config>(config: config, options: GetCallsStatusOptions): {
    readonly queryFn: ({ queryKey }: {
        queryKey: readonly ["callsStatus", {
            id: string;
            connector?: import("../../createConfig.js").Connector | undefined;
            scopeKey?: string | undefined;
        }];
        signal: AbortSignal;
        meta: Record<string, unknown> | undefined;
    }) => Promise<{
        status: "PENDING" | "CONFIRMED";
        receipts?: import("viem").WalletCallReceipt<bigint, "success" | "reverted">[] | undefined;
    }>;
    readonly queryKey: readonly ["callsStatus", {
        id: string;
        connector?: import("../../createConfig.js").Connector | undefined;
        scopeKey?: string | undefined;
    }];
    readonly retry: (failureCount: number, error: import("../actions/getCallsStatus.js").GetCallsStatusErrorType) => boolean;
};
export type GetCallsStatusQueryFnData = GetCallsStatusReturnType;
export type GetCallsStatusData = GetCallsStatusQueryFnData;
export declare function getCallsStatusQueryKey(options: GetCallsStatusOptions): readonly ["callsStatus", {
    id: string;
    connector?: import("../../createConfig.js").Connector | undefined;
    scopeKey?: string | undefined;
}];
export type GetCallsStatusQueryKey = ReturnType<typeof getCallsStatusQueryKey>;
//# sourceMappingURL=getCallsStatus.d.ts.map