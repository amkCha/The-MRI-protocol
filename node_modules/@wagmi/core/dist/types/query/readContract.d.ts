import { type Abi, type ContractFunctionArgs, type ContractFunctionName } from 'viem';
import { type ReadContractParameters, type ReadContractReturnType } from '../actions/readContract.js';
import { type Config } from '../createConfig.js';
import { type ScopeKeyParameter } from '../types/properties.js';
import { type UnionPartial } from '../types/utils.js';
export type ReadContractOptions<abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>, config extends Config> = UnionPartial<ReadContractParameters<abi, functionName, args, config>> & ScopeKeyParameter;
export declare function readContractQueryOptions<config extends Config, const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>>(config: config, options?: ReadContractOptions<abi, functionName, args, config>): {
    readonly queryFn: ({ queryKey }: {
        queryKey: readonly ["readContract", Omit<ReadContractOptions<abi, functionName, args, config>, "abi">];
        signal: AbortSignal;
        meta: Record<string, unknown> | undefined;
    }) => Promise<import("viem").ContractFunctionReturnType<abi, "pure" | "view", functionName, args>>;
    readonly queryKey: readonly ["readContract", Omit<ReadContractOptions<abi, functionName, args, config>, "abi">];
};
export type ReadContractQueryFnData<abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>> = ReadContractReturnType<abi, functionName, args>;
export type ReadContractData<abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>> = ReadContractQueryFnData<abi, functionName, args>;
export declare function readContractQueryKey<config extends Config, const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>>(options?: ReadContractOptions<abi, functionName, args, config>): readonly ["readContract", Omit<ReadContractOptions<abi, functionName, args, config>, "abi">];
export type ReadContractQueryKey<abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, 'pure' | 'view'>, args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>, config extends Config> = ReturnType<typeof readContractQueryKey<config, abi, functionName, args>>;
//# sourceMappingURL=readContract.d.ts.map