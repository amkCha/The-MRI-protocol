import { type ConnectErrorType, type ConnectParameters, type ConnectReturnType } from '../actions/connect.js';
import { type Config } from '../createConfig.js';
import type { Mutate, MutateAsync } from './types.js';
export declare function connectMutationOptions<config extends Config>(config: config): {
    readonly mutationFn: (variables: {
        chainId?: config["chains"][number]["id"] | (config["chains"][number]["id"] extends infer T ? T extends config["chains"][number]["id"] ? T extends config["chains"][number]["id"] ? T : undefined : never : never) | undefined;
        connector: import("../connectors/createConnector.js").CreateConnectorFn | import("../createConfig.js").Connector;
    }) => Promise<ConnectReturnType<config>>;
    readonly mutationKey: readonly ["connect"];
};
export type ConnectData<config extends Config> = ConnectReturnType<config>;
export type ConnectVariables<config extends Config> = ConnectParameters<config>;
export type ConnectMutate<config extends Config, context = unknown> = Mutate<ConnectData<config>, ConnectErrorType, ConnectVariables<config>, context>;
export type ConnectMutateAsync<config extends Config, context = unknown> = MutateAsync<ConnectData<config>, ConnectErrorType, ConnectVariables<config>, context>;
//# sourceMappingURL=connect.d.ts.map