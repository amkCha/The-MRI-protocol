import { type VerifyMessageParameters, type VerifyMessageReturnType } from '../actions/verifyMessage.js';
import { type Config } from '../createConfig.js';
import type { ScopeKeyParameter } from '../types/properties.js';
import type { Evaluate, ExactPartial } from '../types/utils.js';
export type VerifyMessageOptions<config extends Config> = Evaluate<ExactPartial<VerifyMessageParameters<config>> & ScopeKeyParameter>;
export declare function verifyMessageQueryOptions<config extends Config>(config: config, options?: VerifyMessageOptions<config>): {
    readonly queryFn: ({ queryKey }: {
        queryKey: readonly ["verifyMessage", {
            address?: `0x${string}` | undefined;
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            signature?: `0x${string}` | Uint8Array | import("viem").Signature | undefined;
            message?: import("viem").SignableMessage | undefined;
            chainId?: config["chains"][number]["id"] | (config["chains"][number]["id"] extends infer T ? T extends config["chains"][number]["id"] ? T extends config["chains"][number]["id"] ? T : undefined : never : never) | undefined;
            scopeKey?: string | undefined;
        }];
        signal: AbortSignal;
        meta: Record<string, unknown> | undefined;
    }) => Promise<boolean>;
    readonly queryKey: readonly ["verifyMessage", {
        address?: `0x${string}` | undefined;
        blockNumber?: bigint | undefined;
        blockTag?: import("viem").BlockTag | undefined;
        signature?: `0x${string}` | Uint8Array | import("viem").Signature | undefined;
        message?: import("viem").SignableMessage | undefined;
        chainId?: config["chains"][number]["id"] | (config["chains"][number]["id"] extends infer T_1 ? T_1 extends config["chains"][number]["id"] ? T_1 extends config["chains"][number]["id"] ? T_1 : undefined : never : never) | undefined;
        scopeKey?: string | undefined;
    }];
};
export type VerifyMessageQueryFnData = VerifyMessageReturnType;
export type VerifyMessageData = VerifyMessageQueryFnData;
export declare function verifyMessageQueryKey<config extends Config>(options: VerifyMessageOptions<config>): readonly ["verifyMessage", {
    address?: `0x${string}` | undefined;
    blockNumber?: bigint | undefined;
    blockTag?: import("viem").BlockTag | undefined;
    signature?: `0x${string}` | Uint8Array | import("viem").Signature | undefined;
    message?: import("viem").SignableMessage | undefined;
    chainId?: config["chains"][number]["id"] | (config["chains"][number]["id"] extends infer T ? T extends config["chains"][number]["id"] ? T extends config["chains"][number]["id"] ? T : undefined : never : never) | undefined;
    scopeKey?: string | undefined;
}];
export type VerifyMessageQueryKey<config extends Config> = ReturnType<typeof verifyMessageQueryKey<config>>;
//# sourceMappingURL=verifyMessage.d.ts.map