import { type MutateOptions } from '@tanstack/query-core';
import { type SwitchChainErrorType, type SwitchChainParameters, type SwitchChainReturnType } from '../actions/switchChain.js';
import { type Config } from '../createConfig.js';
import { type Evaluate } from '../types/utils.js';
export declare function switchChainMutationOptions<config extends Config>(config: config): {
    readonly mutationFn: (variables: {
        connector?: import("../createConfig.js").Connector | undefined;
        chainId: config["chains"][number]["id"];
        addEthereumChainParameter?: {
            chainName?: string | undefined;
            nativeCurrency?: {
                name: string;
                symbol: string;
                decimals: number;
            } | undefined;
            rpcUrls?: readonly string[] | undefined;
            blockExplorerUrls?: string[] | undefined;
            iconUrls?: string[] | undefined;
        } | undefined;
    }) => Promise<Extract<config["chains"][number], {
        id: Config extends config ? number : config["chains"][number]["id"];
    }>>;
    readonly mutationKey: readonly ["switchChain"];
};
export type SwitchChainData<config extends Config, chainId extends config['chains'][number]['id']> = Evaluate<SwitchChainReturnType<config, chainId>>;
export type SwitchChainVariables<config extends Config, chainId extends config['chains'][number]['id']> = Evaluate<SwitchChainParameters<config, chainId>>;
export type SwitchChainMutate<config extends Config, context = unknown> = <chainId extends config['chains'][number]['id']>(variables: SwitchChainVariables<config, chainId>, options?: Evaluate<MutateOptions<SwitchChainData<config, chainId>, SwitchChainErrorType, Evaluate<SwitchChainVariables<config, chainId>>, context>> | undefined) => void;
export type SwitchChainMutateAsync<config extends Config, context = unknown> = <chainId extends config['chains'][number]['id']>(variables: SwitchChainVariables<config, chainId>, options?: Evaluate<MutateOptions<SwitchChainData<config, chainId>, SwitchChainErrorType, Evaluate<SwitchChainVariables<config, chainId>>, context>> | undefined) => Promise<SwitchChainData<config, chainId>>;
//# sourceMappingURL=switchChain.d.ts.map