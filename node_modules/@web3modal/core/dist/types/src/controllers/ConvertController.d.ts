import type { ConvertTokenWithBalance } from '../utils/TypeUtil.js';
export declare const INITIAL_GAS_LIMIT = 150000;
export type ConvertInputTarget = 'sourceToken' | 'toToken';
type TransactionParams = {
    data: string;
    to: string;
    gas: bigint;
    gasPrice: bigint;
    value: bigint;
    toAmount: string;
};
export interface ConvertControllerState {
    initialized: boolean;
    loadingPrices: boolean;
    loading?: boolean;
    approvalTransaction: TransactionParams | undefined;
    convertTransaction: TransactionParams | undefined;
    transactionLoading?: boolean;
    transactionError?: string;
    sourceToken?: ConvertTokenWithBalance;
    sourceTokenAmount: string;
    sourceTokenPriceInUSD: number;
    toToken?: ConvertTokenWithBalance;
    toTokenAmount: string;
    toTokenPriceInUSD: number;
    networkPrice: string;
    networkBalanceInUSD: string;
    inputError: string | undefined;
    slippage: number;
    tokens?: ConvertTokenWithBalance[];
    suggestedTokens?: ConvertTokenWithBalance[];
    popularTokens?: ConvertTokenWithBalance[];
    foundTokens?: ConvertTokenWithBalance[];
    myTokensWithBalance?: ConvertTokenWithBalance[];
    tokensPriceMap: Record<string, number>;
    gasFee: bigint;
    gasPriceInUSD?: number;
    priceImpact: number | undefined;
    maxSlippage: number | undefined;
}
export interface TokenInfo {
    address: `0x${string}`;
    symbol: string;
    name: string;
    decimals: number;
    logoURI: string;
    domainVersion?: string;
    eip2612?: boolean;
    isFoT?: boolean;
    tags?: string[];
}
export declare const ConvertController: {
    state: ConvertControllerState;
    subscribe(callback: (newState: ConvertControllerState) => void): () => void;
    subscribeKey<K extends keyof ConvertControllerState>(key: K, callback: (value: ConvertControllerState[K]) => void): () => void;
    getParams(): {
        networkAddress: string;
        fromAddress: string;
        fromCaipAddress: `${string}:${string}:${string}` | undefined;
        sourceTokenAddress: `${string}:${string}:${string}` | undefined;
        toTokenAddress: `${string}:${string}:${string}` | undefined;
        toTokenAmount: string;
        toTokenDecimals: number | undefined;
        sourceTokenAmount: string;
        sourceTokenDecimals: number | undefined;
    };
    setLoading(loading: boolean): void;
    setSourceToken(sourceToken: ConvertTokenWithBalance | undefined): void;
    setSourceTokenAmount(amount: string): void;
    setToToken(toToken: ConvertTokenWithBalance | undefined): void;
    setToTokenAmount(amount: string): void;
    setTokenValues(address: string, target: ConvertInputTarget): Promise<void>;
    switchTokens(): void;
    resetTokens(): void;
    resetValues(): void;
    clearError(): void;
    initializeState(): Promise<void>;
    fetchTokens(): Promise<void>;
    getTokenList(): Promise<void>;
    getAddressPrice(address: string): Promise<number>;
    getNetworkTokenPrice(): Promise<void>;
    getMyTokensWithBalance(): Promise<void>;
    setBalances(balances: ConvertTokenWithBalance[]): void;
    getInitialGasPrice(): Promise<void>;
    refreshConvertValues(): Promise<void>;
    calculateGasPriceInEther(gas: bigint, gasPrice: bigint): number;
    calculateGasPriceInUSD(gas: bigint, gasPrice: bigint): number;
    calculatePriceImpact(toTokenAmount: string, gasPriceInUSD: number): number;
    calculateMaxSlippage(): number;
    convertTokens(): Promise<void>;
    makeChecks(): Promise<void>;
    getTransaction(): Promise<TransactionParams | undefined>;
    getToAmount(): string;
    createTokenAllowance(): Promise<{
        data: `0x${string}`;
        to: `0x${string}`;
        gas: bigint;
        gasPrice: bigint;
        value: bigint;
        toAmount: string;
    } | undefined>;
    sendTransactionForApproval(data: TransactionParams): Promise<void>;
    createConvert(): Promise<{
        data: `0x${string}`;
        to: `0x${string}`;
        gas: bigint;
        gasPrice: bigint;
        value: bigint;
        toAmount: string;
    } | undefined>;
    sendTransactionForConvert(data: TransactionParams | undefined): Promise<`0x${string}` | null | undefined>;
    getToTokenValues(amountBigInt: string, decimals: number): {
        toTokenAmount: string;
        toTokenPriceInUSD: number;
    };
    isInsufficientNetworkTokenForGas(): boolean;
    setTransactionDetails(transaction: TransactionParams | undefined): void;
};
export {};
